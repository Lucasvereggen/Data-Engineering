{
  "pipelineSpec": {
    "components": {
      "comp-compare-model": {
        "executorLabel": "exec-compare-model",
        "inputDefinitions": {
          "parameters": {
            "lr_metrics": {
              "type": "STRING"
            },
            "ridge_metrics": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-1": {
        "dag": {
          "tasks": {
            "predict-lr": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-predict-lr"
              },
              "inputs": {
                "parameters": {
                  "features": {
                    "componentInputParameter": "pipelineparam--download-data-2-Output"
                  },
                  "model_repo": {
                    "componentInputParameter": "pipelineparam--model_repo"
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "predict-lr"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--compare-model-Output": {
              "type": "STRING"
            },
            "pipelineparam--download-data-2-Output": {
              "type": "STRING"
            },
            "pipelineparam--model_repo": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-2": {
        "dag": {
          "tasks": {
            "predict-ridge": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-predict-ridge"
              },
              "inputs": {
                "parameters": {
                  "features": {
                    "componentInputParameter": "pipelineparam--download-data-2-Output"
                  },
                  "model_repo": {
                    "componentInputParameter": "pipelineparam--model_repo"
                  },
                  "project_id": {
                    "componentInputParameter": "pipelineparam--project_id"
                  }
                }
              },
              "taskInfo": {
                "name": "predict-ridge"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--compare-model-Output": {
              "type": "STRING"
            },
            "pipelineparam--download-data-2-Output": {
              "type": "STRING"
            },
            "pipelineparam--model_repo": {
              "type": "STRING"
            },
            "pipelineparam--project_id": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-download-data": {
        "executorLabel": "exec-download-data",
        "inputDefinitions": {
          "parameters": {
            "bucket": {
              "type": "STRING"
            },
            "file_name": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-download-data-2": {
        "executorLabel": "exec-download-data-2",
        "inputDefinitions": {
          "parameters": {
            "bucket": {
              "type": "STRING"
            },
            "file_name": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-predict-lr": {
        "executorLabel": "exec-predict-lr",
        "inputDefinitions": {
          "parameters": {
            "features": {
              "type": "STRING"
            },
            "model_repo": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-predict-ridge": {
        "executorLabel": "exec-predict-ridge",
        "inputDefinitions": {
          "parameters": {
            "features": {
              "type": "STRING"
            },
            "model_repo": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-train-lr": {
        "executorLabel": "exec-train-lr",
        "inputDefinitions": {
          "parameters": {
            "features": {
              "type": "STRING"
            },
            "model_repo": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-train-ridge": {
        "executorLabel": "exec-train-ridge",
        "inputDefinitions": {
          "parameters": {
            "features": {
              "type": "STRING"
            },
            "model_repo": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-compare-model": {
          "container": {
            "args": [
              "--lr-metrics",
              "{{$.inputs.parameters['lr_metrics']}}",
              "--ridge-metrics",
              "{{$.inputs.parameters['ridge_metrics']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def compare_model(lr_metrics, ridge_metrics):\n    import logging\n    import json\n    import sys\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n    logging.info(lr_metrics)\n    logging.info(ridge_metrics)\n    if lr_metrics.get(\"R2\") > ridge_metrics.get(\"R2\"):\n        return \"LR\"\n    else :\n        return \"RIDGE\"\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(\n            str(str_value), str(type(str_value))))\n    return str_value\n\nimport json\nimport argparse\n_parser = argparse.ArgumentParser(prog='Compare model', description='')\n_parser.add_argument(\"--lr-metrics\", dest=\"lr_metrics\", type=json.loads, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--ridge-metrics\", dest=\"ridge_metrics\", type=json.loads, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = compare_model(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-download-data": {
          "container": {
            "args": [
              "--project-id",
              "{{$.inputs.parameters['project_id']}}",
              "--bucket",
              "{{$.inputs.parameters['bucket']}}",
              "--file-name",
              "{{$.inputs.parameters['file_name']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-c",
              "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def download_data(project_id, bucket, file_name):\n    '''download data'''\n    from google.cloud import storage\n    import pandas as pd\n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    # Downloaing the file from a google bucket \n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(bucket)\n    blob = bucket.blob(file_name)\n    local_path = '/tmp/'+ file_name\n    blob.download_to_filename(local_path)\n    logging.info('Downloaded Data!')\n\n    # Convert the data to a dictiory object    \n    dict_from_csv = pd.read_csv(local_path, index_col=None, squeeze=True).to_dict()\n    logging.info('Returning Data as Dictionary Object!')\n    return dict_from_csv\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Download data', description='download data')\n_parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--bucket\", dest=\"bucket\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--file-name\", dest=\"file_name\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = download_data(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-download-data-2": {
          "container": {
            "args": [
              "--project-id",
              "{{$.inputs.parameters['project_id']}}",
              "--bucket",
              "{{$.inputs.parameters['bucket']}}",
              "--file-name",
              "{{$.inputs.parameters['file_name']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-c",
              "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def download_data(project_id, bucket, file_name):\n    '''download data'''\n    from google.cloud import storage\n    import pandas as pd\n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    # Downloaing the file from a google bucket \n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(bucket)\n    blob = bucket.blob(file_name)\n    local_path = '/tmp/'+ file_name\n    blob.download_to_filename(local_path)\n    logging.info('Downloaded Data!')\n\n    # Convert the data to a dictiory object    \n    dict_from_csv = pd.read_csv(local_path, index_col=None, squeeze=True).to_dict()\n    logging.info('Returning Data as Dictionary Object!')\n    return dict_from_csv\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Download data', description='download data')\n_parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--bucket\", dest=\"bucket\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--file-name\", dest=\"file_name\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = download_data(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-predict-lr": {
          "container": {
            "args": [
              "--project-id",
              "{{$.inputs.parameters['project_id']}}",
              "--model-repo",
              "{{$.inputs.parameters['model_repo']}}",
              "--features",
              "{{$.inputs.parameters['features']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-c",
              "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def predict_lr(project_id, model_repo, features):\n    import pandas as pd\n    from google.cloud import storage\n    from sklearn.preprocessing import PowerTransformer\n    import pickle \n    import json\n    import logging\n    import sys\n    import os\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    df = pd.DataFrame.from_dict(features)    \n\n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(model_repo)\n    blob = bucket.blob('model.pkl')\n    filename = '/tmp/local_model.pkl'\n    blob.download_to_filename(filename)\n    blob_t = bucket.blob('transformer.pkl')\n    filename_t = '/tmp/transformer.pkl'\n    blob_t.download_to_filename(filename_t)\n\n    #Loading the saved model with joblib\n    model = pickle.load(open(filename, 'rb'))\n    transformer = pickle.load(open(filename_t, 'rb'))\n\n    X = df.drop(['BodyFat', 'Density'], axis=1)\n\n    X['Bmi'] = 703 * X['Weight'] / (X['Height'] * X['Height'])\n    X['ACratio'] = X['Abdomen'] / X['Chest']\n    X['HTratio'] = X['Hip'] / X['Thigh']\n    X.drop(['Weight', 'Height', 'Abdomen', 'Chest', 'Hip', 'Thigh'], axis=1, inplace=True)\n\n    #Transformer\n    X = transformer.transform(X)    \n\n    dfcp = df.copy()   \n    y_classes = model.predict(X)\n    logging.info(y_classes)\n    dfcp['pclass'] = y_classes.tolist()\n    dic = dfcp.to_dict(orient='records') \n\n    #Export best model for ui prediction\n    local_file = '/tmp/local_best_model.pkl'\n    pickle.dump(model, open(local_file, 'wb'))\n    blob = bucket.blob('best_model.pkl')\n    blob.upload_from_filename(local_file)\n    return dic\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport json\nimport argparse\n_parser = argparse.ArgumentParser(prog='Predict lr', description='')\n_parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-repo\", dest=\"model_repo\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--features\", dest=\"features\", type=json.loads, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = predict_lr(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-predict-ridge": {
          "container": {
            "args": [
              "--project-id",
              "{{$.inputs.parameters['project_id']}}",
              "--model-repo",
              "{{$.inputs.parameters['model_repo']}}",
              "--features",
              "{{$.inputs.parameters['features']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-c",
              "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def predict_ridge(project_id, model_repo, features):\n    import pandas as pd\n    from google.cloud import storage\n    from sklearn.preprocessing import PowerTransformer\n    import pickle \n    import json\n    import logging\n    import sys\n    import os\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    df = pd.DataFrame.from_dict(features)    \n\n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(model_repo)\n    blob = bucket.blob('model_ridge.pkl')\n    filename = '/tmp/local_model_ridge.pkl'\n    blob.download_to_filename(filename)\n    blob_t = bucket.blob('transformer.pkl')\n    filename_t = '/tmp/transformer.pkl'\n    blob_t.download_to_filename(filename_t)\n\n    #Loading the saved model with joblib\n    model = pickle.load(open(filename, 'rb'))\n    transformer = pickle.load(open(filename_t, 'rb'))\n\n    X = df.drop(['BodyFat', 'Density'], axis=1)\n\n    X['Bmi'] = 703 * X['Weight'] / (X['Height'] * X['Height'])\n    X['ACratio'] = X['Abdomen'] / X['Chest']\n    X['HTratio'] = X['Hip'] / X['Thigh']\n    X.drop(['Weight', 'Height', 'Abdomen', 'Chest', 'Hip', 'Thigh'], axis=1, inplace=True)\n\n    #Transformer\n    X = transformer.transform(X)    \n\n    dfcp = df.copy()   \n    y_classes = model.predict(X)\n    logging.info(y_classes)\n    dfcp['pclass'] = y_classes.tolist()\n    dic = dfcp.to_dict(orient='records') \n\n    #Export best model for ui prediction\n    local_file = '/tmp/local_best_model.pkl'\n    pickle.dump(model, open(local_file, 'wb'))\n    blob = bucket.blob('best_model.pkl')\n    blob.upload_from_filename(local_file)\n    return dic\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport json\nimport argparse\n_parser = argparse.ArgumentParser(prog='Predict ridge', description='')\n_parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-repo\", dest=\"model_repo\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--features\", dest=\"features\", type=json.loads, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = predict_ridge(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-train-lr": {
          "container": {
            "args": [
              "--features",
              "{{$.inputs.parameters['features']}}",
              "--project-id",
              "{{$.inputs.parameters['project_id']}}",
              "--model-repo",
              "{{$.inputs.parameters['model_repo']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-c",
              "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' 'np' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' 'np' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def train_lr (features, project_id, model_repo):\n    '''train a Linear Regression with default parameters'''\n    import pandas as pd\n    import numpy as np\n    from sklearn.linear_model import LinearRegression\n    from sklearn.model_selection import train_test_split\n    from sklearn.preprocessing import PowerTransformer\n    from sklearn.metrics import r2_score\n    from sklearn.metrics import mean_squared_error\n    from google.cloud import storage\n    import pickle\n    import json\n    import logging \n    import sys\n    import os\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    df = pd.DataFrame.from_dict(features)  \n\n    logging.info(df.columns)\n\n    X = df.drop(['BodyFat', 'Density'], axis=1)\n    y = df['Density']\n\n    X['Bmi'] = 703 * X['Weight'] / (X['Height'] * X['Height'])\n    X['ACratio'] = X['Abdomen'] / X['Chest']\n    X['HTratio'] = X['Hip'] / X['Thigh']\n    X.drop(['Weight', 'Height', 'Abdomen', 'Chest', 'Hip', 'Thigh'], axis=1, inplace=True)\n\n    # Splitting the data for the model\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\n    #Transformer\n    trans = PowerTransformer()\n    X_train = trans.fit_transform(X_train)\n    X_test = trans.transform(X_test)\n\n    # define and fit model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    # evaluate the model\n    r2 = r2_score(y_test, y_pred)\n    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n    lr_metrics = {\n        \"R2\": r2,\n    #    \"RMSE\": rmse,\n    }\n    logging.info(lr_metrics)\n\n    # Save the model localy\n    local_file = '/tmp/local_model.pkl'\n    pickle.dump(model, open(local_file, 'wb'))\n\n    #Save the transformer localy\n    local_file_trans = '/tmp/transformer.pkl'\n    pickle.dump(trans, open(local_file_trans, 'wb'))\n     # write out output\n\n    # Save to GCS as model.pkl\n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(model_repo)\n    blob = bucket.blob('model.pkl')\n    blob_t = bucket.blob('transformer.pkl')\n    # Upload the locally saved model\n    blob.upload_from_filename(local_file)\n    blob_t.upload_from_filename(local_file_trans)\n\n    print(\"Saved the model to GCP bucket : \" + model_repo)\n    return lr_metrics\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport json\nimport argparse\n_parser = argparse.ArgumentParser(prog='Train lr', description='train a Linear Regression with default parameters')\n_parser.add_argument(\"--features\", dest=\"features\", type=json.loads, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-repo\", dest=\"model_repo\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_lr(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-train-ridge": {
          "container": {
            "args": [
              "--features",
              "{{$.inputs.parameters['features']}}",
              "--project-id",
              "{{$.inputs.parameters['project_id']}}",
              "--model-repo",
              "{{$.inputs.parameters['model_repo']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-c",
              "(PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' 'np' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage' 'pandas' 'sklearn' 'np' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def train_ridge (features, project_id, model_repo):\n    '''train a Ridge regression with default parameters'''\n    import pandas as pd\n    import numpy as np\n    from sklearn.linear_model import Ridge\n    from sklearn.model_selection import train_test_split\n    from sklearn.preprocessing import PowerTransformer\n    from sklearn.metrics import r2_score\n    from sklearn.metrics import mean_squared_error\n    from google.cloud import storage\n    import pickle\n    import json\n    import logging \n    import sys\n    import os\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    df = pd.DataFrame.from_dict(features)  \n\n    logging.info(df.columns)\n\n    X = df.drop(['BodyFat', 'Density'], axis=1)\n    y = df['Density']\n\n    X['Bmi'] = 703 * X['Weight'] / (X['Height'] * X['Height'])\n    X['ACratio'] = X['Abdomen'] / X['Chest']\n    X['HTratio'] = X['Hip'] / X['Thigh']\n    X.drop(['Weight', 'Height', 'Abdomen', 'Chest', 'Hip', 'Thigh'], axis=1, inplace=True)\n\n    # Splitting the data for the model\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\n    #Transformer\n    trans = PowerTransformer()\n    X_train = trans.fit_transform(X_train)\n    X_test = trans.transform(X_test)\n\n    # define and fit model\n    model = Ridge()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    # evaluate the model\n    r2 = r2_score(y_test, y_pred)\n    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n    ridge_metrics = {\n        \"R2\": r2,\n    #    \"RMSE\": rmse,\n    }\n    logging.info(ridge_metrics)\n\n    # Save the model localy\n    local_file = '/tmp/local_model_ridge.pkl'\n    pickle.dump(model, open(local_file, 'wb'))\n\n    #Save the transformer localy\n    local_file_trans = '/tmp/transformer.pkl'\n    pickle.dump(trans, open(local_file_trans, 'wb'))\n     # write out output\n\n    # Save to GCS as model.pkl\n    client = storage.Client(project=project_id)\n    bucket = client.get_bucket(model_repo)\n    blob = bucket.blob('model_ridge.pkl')\n    blob_t = bucket.blob('transformer.pkl')\n    # Upload the locally saved model\n    blob.upload_from_filename(local_file)\n    blob_t.upload_from_filename(local_file_trans)\n\n    print(\"Saved the model to GCP bucket : \" + model_repo)\n    return ridge_metrics\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport json\nimport argparse\n_parser = argparse.ArgumentParser(prog='Train ridge', description='train a Ridge regression with default parameters')\n_parser.add_argument(\"--features\", dest=\"features\", type=json.loads, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-repo\", dest=\"model_repo\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_ridge(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "bodyfat-predictor-training-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "compare-model": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-compare-model"
            },
            "dependentTasks": [
              "train-lr",
              "train-ridge"
            ],
            "inputs": {
              "parameters": {
                "lr_metrics": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "train-lr"
                  }
                },
                "ridge_metrics": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "train-ridge"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "compare-model"
            }
          },
          "condition-1": {
            "componentRef": {
              "name": "comp-condition-1"
            },
            "dependentTasks": [
              "compare-model",
              "download-data-2"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--compare-model-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "compare-model"
                  }
                },
                "pipelineparam--download-data-2-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "download-data-2"
                  }
                },
                "pipelineparam--model_repo": {
                  "componentInputParameter": "model_repo"
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "condition-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--compare-model-Output'].string_value == 'LR'"
            }
          },
          "condition-2": {
            "componentRef": {
              "name": "comp-condition-2"
            },
            "dependentTasks": [
              "compare-model",
              "download-data-2"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--compare-model-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "compare-model"
                  }
                },
                "pipelineparam--download-data-2-Output": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "download-data-2"
                  }
                },
                "pipelineparam--model_repo": {
                  "componentInputParameter": "model_repo"
                },
                "pipelineparam--project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "condition-2"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--compare-model-Output'].string_value == 'RIDGE'"
            }
          },
          "download-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-download-data"
            },
            "inputs": {
              "parameters": {
                "bucket": {
                  "componentInputParameter": "data_bucket"
                },
                "file_name": {
                  "componentInputParameter": "trainset_filename"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "download-data"
            }
          },
          "download-data-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-download-data-2"
            },
            "dependentTasks": [
              "train-lr",
              "train-ridge"
            ],
            "inputs": {
              "parameters": {
                "bucket": {
                  "componentInputParameter": "data_bucket"
                },
                "file_name": {
                  "componentInputParameter": "testset_filename"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "download-data-2"
            }
          },
          "train-lr": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train-lr"
            },
            "dependentTasks": [
              "download-data"
            ],
            "inputs": {
              "parameters": {
                "features": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "download-data"
                  }
                },
                "model_repo": {
                  "componentInputParameter": "model_repo"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "train-lr"
            }
          },
          "train-ridge": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train-ridge"
            },
            "dependentTasks": [
              "download-data"
            ],
            "inputs": {
              "parameters": {
                "features": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "download-data"
                  }
                },
                "model_repo": {
                  "componentInputParameter": "model_repo"
                },
                "project_id": {
                  "componentInputParameter": "project_id"
                }
              }
            },
            "taskInfo": {
              "name": "train-ridge"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "data_bucket": {
            "type": "STRING"
          },
          "model_repo": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          },
          "testset_filename": {
            "type": "STRING"
          },
          "trainset_filename": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.14"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://bodyfat_temp"
  }
}